using SweetManagerWebService.Communication.Domain.Model.Aggregates;
using SweetManagerWebService.IAM.Domain.Model.Entities.Assignments;
using SweetManagerWebService.IAM.Domain.Model.Entities.Credentials;
using SweetManagerWebService.IAM.Domain.Model.Entities.Roles;
using SweetManagerWebService.ResourceManagement.Domain.Model.Aggregates;

namespace SweetManagerWebService.IAM.Domain.Model.Aggregates
{
    // Represents an administrator user in the system
    public partial class Admin(int id, string username, string email, int rolesId, 
        string name, string surname, int phone, string state)
    {
        // Unique identifier for the admin (private set)
        public int Id { get; private set; } = id;

        // Role ID associated with this admin (private set)
        public int RolesId { get; private set; } = rolesId;

        // Admin's username/login (private set)
        public string Username { get; private set; } = username;

        // Admin's first name (converted to uppercase, private set)
        public string Name { get; private set; } = name.ToUpper();

        // Admin's last name (converted to uppercase, private set)
        public string Surname { get; private set; } = surname.ToUpper();

        // Admin's email address (private set)
        public string Email { get; private set; } = email;

        // Admin's phone number (private set)
        public int Phone { get; private set; } = phone;

        // Admin's state/status (converted to uppercase, private set)
        public string State { get; private set; } = state.ToUpper();

        // Admin's credential information (optional)
        public virtual AdminCredential? AdminCredential { get; }

        // Role assigned to this admin (required)
        public virtual Role Role { get; } = null!;

        // Collection of worker assignments managed by this admin
        public virtual ICollection<AssignmentWorker> AssignmentsWorkers { get; } = [];

        // Collection of notifications associated with this admin
        public virtual ICollection<Notification> Notifications { get; } = [];

        // Collection of reports generated by this admin
        public virtual ICollection<Report> Reports { get; } = [];
    }
}
